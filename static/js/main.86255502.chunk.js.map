{"version":3,"sources":["const.js","Settings.js","Grid.js","Results.js","App.js","index.js"],"names":["parentSelection","Settings","valueText","value","getSimulationDisabled","props","grid","length","y","gridSize","x","className","FormControl","variant","sx","m","minWidth","InputLabel","id","Select","labelId","disabled","this","settingsEnabled","name","label","onChange","handleChangeGrid","MenuItem","count","Array","map","i","TextField","handleChange","populationCount","onBlur","setPopulation","generationCount","setGenerations","Box","width","Typography","Slider","handleSlider","tournamentCount","valueLabelDisplay","size","step","marks","min","max","mutationChance","valueLabelFormat","FormControlLabel","control","Switch","checked","elitism","handleSwitch","elitismRatio","getAriaValueText","continue","Button","onClick","generatePositions","component","e","showFile","type","hidden","startSimulation","finished","success","continueSimulation","endSimulation","React","Grid","array","idx","number","idy","src","process","alt","concat","successfulIndividual","results","stats","Results","getMoveString","move","Error","moveCount","moves","App","setState","target","createGrid","generateRandomPosition","Math","floor","random","state","from","insertTreasures","coordinates","a","preventDefault","reader","FileReader","onload","text","result","split","item","parseInt","readAsText","files","Number","isNaN","generateCell","chooseFromInterval","findIndex","fitnessArray","createFirstPopulation","population","individual","j","push","mergeIndividuals","individual1","individual2","newIndividual","randomIndex","replaceString","string","index","replacement","substr","mutateIndivual","positions","position","includes","forEach","bitPosition","binaryIndividual","dec2bin","newBit","bin2dec","pushBestInvidivuals","generation","newGeneration","desiredCount","combinedArray","sort","b","fitness","getDesiredCount","runOneIndividual","fitnessSumArray","fitnessSum","cloneIndividual","runSimulation","treasuresFound","returnObject","undefined","sucessIndividual","applyRoulette","index1","index2","newIndividual1","newIndividual2","getRandomIndexes","indexArray","findStrongest","indexes","maxFitness","itemIndex","applyTournament","indexes1","indexes2","startComputations","firstPopulation","bestIndividual","statistics","outerArray","minFitness","MAX_SAFE_INTEGER","averageFitness","toFixed","loading","setTimeout","dec","toString","padStart","bin","getInstruction","substring","getAdress","getLast2Bits","cloneGrid","findPlayer","playerX","playerY","changeGrid","oldX","oldY","newX","newY","applyMove","moveNumber","instructionCount","firstTime","instruction","address","error","prevProps","prevState","container","spacing","xs","ResponsiveContainer","height","LineChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","stroke","XAxis","allowDecimals","tickCount","dataKey","YAxis","Tooltip","Legend","Line","dot","Backdrop","color","zIndex","theme","open","CircularProgress","Component","darkTheme","createTheme","palette","mode","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.86255502.chunk.js","sourcesContent":["export const parentSelection = {\n  roulette: 0,\n  tournament: 1\n}","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport TextField from '@mui/material/TextField';\nimport Select from '@mui/material/Select';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Switch from '@mui/material/Switch';\nimport Slider from '@mui/material/Slider';\nimport { parentSelection } from './const';\n\nexport default class Settings extends React.Component {\n\n  valueText = value => {\n    return `${value}%`;\n  }\n\n  getSimulationDisabled = () => {\n    if (!this.props.grid.length)\n      return true;\n\n    for (let y = 0; y < this.props.gridSize; y++) {\n      for (let x = 0; x < this.props.gridSize; x++) {\n        if (this.props.grid?.[y]?.[x] === 1)\n          return false;\n      }\n    }\n\n    return true;\n  }\n\n  render() {\n    return (\n      <div className=\"settings\">\n        <h2 className=\"m-2\">Úvodné nastavenie</h2>\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <InputLabel id=\"gridLabel\">Veľkosť mriežky</InputLabel>\n          <Select\n            labelId=\"gridLabel\"\n            disabled={!this.props.settingsEnabled}\n            id=\"gridSize\"\n            name=\"gridSize\"\n            value={this.props.gridSize}\n            label=\"Veľkosť mriežky\"\n            onChange={this.props.handleChangeGrid}\n          >\n            <MenuItem value={5}>5x5</MenuItem>\n            <MenuItem value={6}>6x6</MenuItem>\n            <MenuItem value={7}>7x7</MenuItem>\n            <MenuItem value={8}>8x8</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <InputLabel id=\"countLabel\">Počet pokladov</InputLabel>\n          <Select\n            labelId=\"countLabel\"\n            disabled={!this.props.settingsEnabled}\n            id=\"count\"\n            name=\"count\"\n            value={this.props.count}\n            label=\"Počet pokladov\"\n            onChange={this.props.handleChangeGrid}\n          >\n            {[...Array(10)].map((i, y) =>\n              <MenuItem key={y} value={y + 1}>{y + 1}</MenuItem>\n            )}\n          </Select>\n        </FormControl>\n        <br />\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <InputLabel id=\"xLabel\">Začiatočná pozícia x</InputLabel>\n          <Select\n            labelId=\"xLabel\"\n            id=\"x\"\n            disabled={!this.props.settingsEnabled}\n            name=\"x\"\n            value={this.props.x}\n            label=\"Začiatočná pozícia x\"\n            onChange={this.props.handleChangeGrid}\n          >\n            {[...Array(this.props.gridSize)].map((i, x) =>\n              <MenuItem key={x} value={x}>{x}</MenuItem>\n            )}\n          </Select>\n        </FormControl>\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <InputLabel id=\"yLabel\">Začiatočná pozícia y</InputLabel>\n          <Select\n            labelId=\"yLabel\"\n            id=\"y\"\n            disabled={!this.props.settingsEnabled}\n            name=\"y\"\n            value={this.props.y}\n            label=\"Začiatočná pozícia y\"\n            onChange={this.props.handleChangeGrid}\n          >\n            {[...Array(this.props.gridSize)].map((i, y) =>\n              <MenuItem key={y} value={y}>{y}</MenuItem>\n            )}\n          </Select>\n        </FormControl>\n        <br />\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <TextField\n            onChange={this.props.handleChange}\n            name=\"populationCount\"\n            disabled={!this.props.settingsEnabled}\n            id=\"populationCount\"\n            label=\"Počet jedincov v populácii\"\n            value={this.props.populationCount}\n            onBlur={this.props.setPopulation}\n            variant=\"filled\"\n          />\n        </FormControl>\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <TextField\n            onChange={this.props.handleChange}\n            id=\"generationCount\"\n            disabled={!this.props.settingsEnabled}\n            name=\"generationCount\"\n            label=\"Počet generácii\"\n            value={this.props.generationCount}\n            onBlur={this.props.setGenerations}\n            variant=\"filled\"\n          />\n        </FormControl>\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <InputLabel id=\"parentSelectionLabel\">Spôsob výberu jedincov</InputLabel>\n          <Select\n            labelId=\"parentSelectionLabel\"\n            id=\"parentSelection\"\n            disabled={!this.props.settingsEnabled}\n            name=\"parentSelection\"\n            value={this.props.parentSelection}\n            label=\"Spôsob výberu jedincov\"\n            onChange={this.props.handleChange}\n          >\n            <MenuItem value={parentSelection.roulette}>Ruleta</MenuItem>\n            <MenuItem value={parentSelection.tournament}>Turnaj</MenuItem>\n          </Select>\n        </FormControl>\n        {\n          (this.props.parentSelection === parentSelection.tournament) &&\n          <Box className=\"box\" sx={{ width: 200 }}>\n            <Typography>Počet jedincov do turnaja</Typography>\n            <Slider\n              aria-label=\"Počet jedincov do turnaja\"\n              name=\"tournamentCount\"\n              onChange={this.props.handleSlider}\n              disabled={!this.props.settingsEnabled}\n              value={this.props.tournamentCount}\n              valueLabelDisplay=\"on\"\n              size=\"small\"\n              step={1}\n              className=\"tournamentSlider\"\n              marks\n              min={2}\n              max={5}\n            />\n          </Box>\n        }\n        <div className=\"m-2\">\n          <Box className=\"box2\" sx={{ width: 420 }}>\n            <Typography className=\"chance\">Šanca na mutáciu</Typography>\n            <Slider\n              aria-label=\"Šanca na mutáciu\"\n              name=\"mutationChance\"\n              onChange={this.props.handleSlider}\n              disabled={!this.props.settingsEnabled}\n              value={this.props.mutationChance}\n              valueLabelFormat={this.valueText}\n              valueLabelDisplay=\"on\"\n              step={1}\n              className=\"mutationSlider\"\n              marks\n              min={1}\n              max={10}\n            />\n          </Box>\n        </div>\n        <div className=\"m-2 sliders\">\n          <Box sx={{ width: 420 }}>\n            <FormControl>\n              <FormControlLabel control={<Switch disabled={!this.props.settingsEnabled} checked={this.props.elitism} name=\"elitism\" onChange={this.props.handleSwitch} />} label=\"Elitárstvo\" />\n            </FormControl>\n            {this.props.elitism &&\n              <Slider\n                className=\"slider\"\n                aria-label=\"Podiel elitárstva\"\n                name=\"elitismRatio\"\n                disabled={!this.props.settingsEnabled}\n                onChange={this.props.handleSlider}\n                value={this.props.elitismRatio}\n                getAriaValueText={this.valueText}\n                valueLabelDisplay=\"on\"\n                valueLabelFormat={this.valueText}\n                step={5}\n                marks\n                min={10}\n                max={100}\n              />\n            }\n          </Box>\n          <FormControl>\n            <FormControlLabel control={<Switch disabled={!this.props.settingsEnabled} checked={this.props.continue} name=\"continue\" onChange={this.props.handleSwitch} />} label=\"Pokračovať po poslednej bunke\" />\n          </FormControl>\n        </div>\n        <div className=\"m-2\">\n          <Button onClick={this.props.generatePositions} disabled={!this.props.settingsEnabled} className=\"ml-5 button\" variant=\"outlined\">Vygenuruj pozície pokladov</Button>\n          <br />\n          <Button disabled={!this.props.settingsEnabled} className=\"button-2\" variant=\"outlined\" component=\"label\">\n            Nahraj súbor so súradnicami\n            <input\n              onChange={(e) => this.props.showFile(e)}\n              type=\"file\"\n              hidden\n            />\n          </Button>\n          <br />\n          <Button onClick={this.props.startSimulation} disabled={this.getSimulationDisabled()} className=\"ml-5 button-3\" variant=\"outlined\">Začať novú simuláciu</Button>\n          {(this.props.finished) &&\n            <>\n              {!this.props.success &&\n                <Button onClick={this.props.continueSimulation} className=\"ml-5 button-3\" variant=\"outlined\">Pokračuj simuláciu</Button>\n              }\n              <Button onClick={this.props.endSimulation} className=\"ml-5 button-3\" variant=\"outlined\">Skonči simuláciu</Button>\n            </>\n          }\n        </div>\n      </div >\n    );\n  }\n}","import * as React from 'react';\nimport './grid.css';\n\nexport default class Grid extends React.Component {\n  render() {\n    return (\n      <>\n        {this.props.grid.length ? <h2>Začiatočný stav</h2> : null}\n        {this.props.grid?.map((array, idx) => {\n          return array?.map((number, idy) => {\n            return number === 0 ?\n              <div key={`${idx}${idy}`} className=\"cell\"></div> :\n              number === 1 ?\n                <div key={`${idx}${idy}`} className=\"cell\">\n                  <img src={process.env.PUBLIC_URL + '/images/treasure.png'} alt=\"Poklad\" />\n                </div> :\n                <div key={`${idx}${idy}`} className=\"cell player\">\n                  <img src={process.env.PUBLIC_URL + '/images/miner.png'} alt=\"Hľadač\" />\n                </div>\n          }).concat(<div key={idx} className=\"separator\" />);\n        })}\n        <div className=\"mt-2\">\n          {this.props.finished && <h2>Koncový stav</h2>}\n          {this.props.finished && this.props.successfulIndividual?.results?.stats?.grid?.map((array, idx) => {\n            return array?.map((number, idy) => {\n              return number === 0 ?\n                <div key={`${idx}${idy}`} className=\"cell\"></div> :\n                number === 1 ?\n                  <div key={`${idx}${idy}`} className=\"cell\">\n                    <img src={process.env.PUBLIC_URL + '/images/treasure.png'} alt=\"Poklad\" />\n                  </div> :\n                  <div key={`${idx}${idy}`} className=\"cell player\">\n                    <img src={process.env.PUBLIC_URL + '/images/miner.png'} alt=\"Hľadač\" />\n                  </div>\n            }).concat(<div key={idx} className=\"separator\" />);\n          })}\n        </div>\n\n      </>\n    )\n  }\n}","import * as React from 'react';\n\nexport default class Results extends React.Component {\n\n  getMoveString = move => {\n    switch (move) {\n      case 0:\n        return \"Hore\";\n      case 1:\n        return \"Dole\";\n      case 2:\n        return \"Doprava\";\n      case 3:\n        return \"Doľava\";\n      default:\n        throw new Error(\"Bad move\");\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {this.props.finished &&\n          <>\n            {this.props.successfulIndividual?.results?.stats?.success ?\n              <h2>Boli úspešné nájdené všetky poklady</h2> :\n              <h2>Neboli úspešné nájdené všetky poklady</h2>}\n            <h4>Počet krokov: {this.props.successfulIndividual?.results?.stats?.moveCount}</h4>\n            <h4>Postupnosť krokov</h4>\n            <div>\n              {this.props.successfulIndividual?.results?.stats?.moves?.map((move, idx) => {\n                return <p key={idx} className=\"move\">{`${this.getMoveString(move)}, `}</p>\n              })}\n            </div>\n          </>\n        }\n      </>\n    )\n  }\n}","import Settings from './Settings';\nimport Gamegrid from './Grid';\nimport React from 'react';\nimport Results from './Results';\nimport Box from '@mui/material/Box';\nimport Backdrop from '@mui/material/Backdrop';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Grid from '@mui/material/Grid';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { parentSelection } from './const';\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gridSize: 5,\n      grid: [],\n      x: 0,\n      y: 0,\n      count: 1,\n      populationCount: 20,\n      generationCount: 20,\n      continue: true,\n      elitism: true,\n      elitismRatio: 10,\n      tournamentCount: 2,\n      parentSelection: parentSelection.roulette,\n      mutationChance: 10,\n      finished: false,\n      success: false,\n      settingsEnabled: true,\n      loading: false,\n      statistics: [],\n      successfulIndividual: {}\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.gridSize !== this.state.gridSize ||\n      prevState.populationCount !== this.state.populationCount ||\n      prevState.generationCount !== this.state.generationCount ||\n      prevState.elitism !== this.state.elitism ||\n      prevState.elitismRatio !== this.state.elitismRatio ||\n      prevState.tournamentCount !== this.state.tournamentCount ||\n      prevState.mutationChance !== this.state.mutationChance ||\n      prevState.x !== this.state.x ||\n      prevState.y !== this.state.y) {\n      this.setState({ finished: false });\n    }\n  }\n\n  handleChangeGrid = e => {\n    this.setState({ [e.target.name]: e.target.value }, () => {\n      if (e.target.name === 'gridSize')\n        this.setState({ x: 0, y: 0 }, () => {\n          this.setState({ grid: this.createGrid() });\n        });\n      else if (e.target.name === 'count')\n        this.generatePositions();\n      else\n        this.setState({ grid: this.createGrid() });\n    });\n  }\n\n  handleSwitch = e => {\n    this.setState({ [e.target.name]: e.target.checked });\n  }\n\n  handleSlider = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  generateRandomPosition = () => {\n    return Math.floor(Math.random() * this.state.gridSize);\n  }\n\n  generatePositions = () => {\n    let grid = this.createGrid();\n\n    // Podla poctu pokladov\n    for (let i = 0; i < this.state.count; i++) {\n      while (true) { // Generujeme poziciu\n        let x = this.generateRandomPosition();\n        let y = this.generateRandomPosition();\n\n        if (grid[y][x] === 0) {   // Overenie, ci sa na danej pozicii uz nenachadza poklad\n          grid[y][x] = 1; // Umiestnenie pokladu\n          break;\n        }\n      }\n    }\n\n    this.setState({ grid, finished: false });\n  }\n\n  // Vytvorenie 2d pola, so samymi nulami\n  createGrid = () => {\n    let gridSize = this.state.gridSize;\n    let grid = Array.from({ length: gridSize }, () => (Array.from({ length: gridSize }, () => 0)));\n    grid[this.state.y][this.state.x] = 2; // Náš hráč sa nachádza na tejto pozícii\n\n    return grid;\n  }\n\n  insertTreasures = coordinates => {\n    let grid = this.createGrid();\n    for (let i = 0; i < coordinates.length; i++) {\n      let [x, y] = coordinates[i];\n      grid[y][x] = 1;\n    }\n\n    this.setState({ grid });\n  }\n\n  showFile = async (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const text = e.target.result; // Precitam text, urobim z neho 2d array so suradnicami - pozicie pokladov\n      let coordinates = text.split(\"\\n\").map(item => {\n        return item.split(\",\").map(item => parseInt(item));\n      });\n      this.insertTreasures(coordinates);\n      this.setState({ count: coordinates.length });\n    };\n    reader.readAsText(e.target.files[0]);\n    e.target.value = null; // Vyresetujeme input pre dalsie pouzitie\n  }\n\n  setPopulation = () => {\n    let value = Number(this.state.populationCount);\n    if (!isNaN(value)) {\n      value = value < 20 ? 20 : value % 2 === 1 ? value + 1 : value;\n      this.setState({ populationCount: value });\n    }\n    else {\n      this.setState({ populationCount: 20 });\n    }\n  }\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  setGenerations = () => {\n    let value = this.state.generationCount;\n    if (!isNaN(value)) {\n      value = value < 20 ? 20 : value;\n      this.setState({ generationCount: value });\n    }\n    else {\n      this.setState({ generationCount: 20 });\n    }\n  }\n\n  generateCell = () => {\n    return Math.floor(Math.random() * 256);\n  }\n\n  chooseFromInterval = max => {\n    return Math.random() * max;\n  }\n\n  findIndex = (number, fitnessArray) => {\n    if (number < fitnessArray[0])\n      return 0;\n    for (let i = 0; i < this.state.populationCount; i++) {\n      if (number >= fitnessArray[i] && number <= fitnessArray[i + 1])\n        return i;\n    }\n    throw new Error(\"Number not found!\");\n  }\n\n  createFirstPopulation = () => {\n    let population = [];\n    for (let i = 0; i < this.state.populationCount; i++) { // Vytvorim si dany pocet jedincov\n      let individual = [];\n      for (let j = 0; j < 64; j++) { // Kazdy jedinec ma 64 buniek\n        individual.push(this.generateCell());\n      }\n      population.push(individual);\n    }\n\n    return population;\n  }\n\n  mergeIndividuals = (individual1, individual2) => {\n    let newIndividual = []; // Novy jedinec\n    const randomIndex = Math.floor(Math.random() * 64);\n\n    for (let i = 0; i < randomIndex; i++) { // Prva cast bude z prveho jedinca\n      newIndividual.push(individual1[i]);\n    }\n    for (let i = randomIndex; i < 64; i++) { // Druha cast z druheho jedinca\n      newIndividual.push(individual2[i]);\n    }\n\n    return newIndividual;\n  }\n\n  replaceString = (string, index, replacement) => {\n    return string.substr(0, index) + replacement + string.substr(index + 1);\n  }\n\n  mutateIndivual = individual => {\n    const number = Math.floor(Math.random() * 101); // Cislo od 0 po 100\n\n    if (this.state.mutationChance < number) { // Ak dojde k mutacii\n      const count = Math.floor(Math.random() * 3) + 1; // Zmenim 1 az 3 bunky\n      let positions = [];\n      while (positions.length < count) {\n        const position = Math.floor(Math.random() * 64);\n        if (!positions.includes(position)) // Chcem unikatne pozicie\n          positions.push(position);\n      }\n\n      positions.forEach(position => {\n        const bitPosition = Math.floor(Math.random() * 8); // Bity 0 az 7\n        let binaryIndividual = this.dec2bin(individual[position]); // Konverzia danej bunky na binarne cislo\n        let newBit = parseInt(binaryIndividual[bitPosition]) === 1 ? 0 : 1; // Obratim bit\n        binaryIndividual = this.replaceString(binaryIndividual, bitPosition, newBit) // Zmenim tento bit\n        individual[position] = this.bin2dec(binaryIndividual); // Prepisem povodnu bunku\n      });\n    }\n  }\n\n  pushBestInvidivuals = (fitnessArray, generation, newGeneration, desiredCount) => {\n    let combinedArray = [];\n    for (let j = 0; j < this.state.populationCount; j++)\n      combinedArray.push({ 'fitness': fitnessArray[j], 'individual': generation[j] });\n\n    combinedArray.sort((a, b) => (b.fitness - a.fitness));\n\n    for (let j = 0; j < this.state.populationCount - desiredCount; j++) {\n      newGeneration.push(combinedArray[j].individual);\n    }\n  }\n\n  // Funkcia pre zistenie, kolko jedincov chceme ziskat krizenim\n  getDesiredCount = () => {\n    if (this.state.elitism) {\n      let desiredCount = this.state.populationCount - Math.floor((this.state.elitismRatio / 100) * this.state.populationCount);\n      return desiredCount % 2 === 1 ? desiredCount - 1 : desiredCount;\n    } else {\n      return this.state.populationCount;\n    }\n  }\n\n  runOneIndividual = (individual, fitnessArray, fitnessSumArray, fitnessSum) => {\n    let newIndividual = this.cloneIndividual(individual);\n    const stats = this.runSimulation(newIndividual);\n    const fitness = stats.treasuresFound - 0.001 * stats.moveCount <= 0 ? 0.05 : stats.treasuresFound - 0.001 * stats.moveCount; // Výpočet fitness funkcie, priorita je počet nájdených pokladov a sekundárne počet krokov\n    fitnessArray.push(fitness); // Pole pre jednotlive fitness\n    fitnessSum += fitness; // Pripočitame fitness jedinca ku celkovej fitness\n\n    fitnessSumArray.push(fitnessSum); // Do pola zapiseme novu aktualnu celkovu hodnotu, tuto pouzijeme na ruletu\n    let returnObject = {\n      fitnessSum,\n      fitness,\n      stats,\n      success: undefined\n    };\n\n    if (stats.success) { // Hrac nasiel vsetky poklady\n      this.setState({ sucessIndividual: stats });\n      returnObject.success = true;\n      return returnObject;\n    }\n\n    returnObject.success = false;\n    return returnObject;\n  }\n\n  applyRoulette = (fitnessSum, fitnessSumArray, generation, newGeneration) => {\n    const index1 = this.findIndex(this.chooseFromInterval(fitnessSum), fitnessSumArray); // Vyber nahodnych jedincov podla fitness\n    const index2 = this.findIndex(this.chooseFromInterval(fitnessSum), fitnessSumArray);\n    if ((index1 !== index2)) { // Vyberam roznych potomkov\n      let newIndividual1 = this.mergeIndividuals(generation[index1], generation[index2]); // Krizenie\n      let newIndividual2 = this.mergeIndividuals(generation[index1], generation[index2]);\n      this.mutateIndivual(newIndividual1);\n      this.mutateIndivual(newIndividual2);\n      newGeneration.push(newIndividual1, newIndividual2);\n    }\n  }\n\n  getRandomIndexes = () => {\n    let indexArray = [];\n    while (indexArray.length < this.state.tournamentCount) { //\n      const index = Math.floor(Math.random() * this.state.populationCount);\n      if (!indexArray.includes(index)) {\n        indexArray.push(index);\n      }\n    }\n    return indexArray;\n  }\n\n  // Najdenie najsilnejsieho jedinca z turnaja\n  findStrongest = (indexes, fitnessArray, generation) => {\n    let maxFitness = 0, itemIndex = 0;\n    indexes.forEach(index => {\n      if (fitnessArray[index] > maxFitness) {\n        maxFitness = fitnessArray[index];\n        itemIndex = index;\n      }\n    });\n\n    return generation[itemIndex];\n  }\n\n  applyTournament = (fitnessArray, generation, newGeneration) => {\n    const indexes1 = this.getRandomIndexes();\n    const indexes2 = this.getRandomIndexes();\n    let individual1 = this.findStrongest(indexes1, fitnessArray, generation);\n    let individual2 = this.findStrongest(indexes2, fitnessArray, generation);\n    let newIndividual1 = this.mergeIndividuals(individual1, individual2);\n    let newIndividual2 = this.mergeIndividuals(individual1, individual2);\n    this.mutateIndivual(newIndividual1);\n    this.mutateIndivual(newIndividual2);\n    newGeneration.push(newIndividual1, newIndividual2);\n  }\n\n  continueSimulation = () => {\n    this.startSimulation(undefined, this.state.generation);\n  }\n\n  endSimulation = () => {\n    this.setState({ settingsEnabled: true });\n  }\n\n  startComputations = (e, firstPopulation) => {\n    let population = (firstPopulation || this.createFirstPopulation()); // Buď vytvorim novu populaciu, alebo zoberiem prechadzajucu\n    let generation = population;\n    let bestIndividual = { results: { fitness: 0, success: false } };\n    let statistics = []; // Statistiky pre graf\n\n    outerArray:\n    for (let i = 0; i < this.state.generationCount; i++) { // Podla poctu pozadovanych generacii\n      let newGeneration = [], fitnessArray = [], fitnessSumArray = [], fitnessSum = 0, minFitness = Number.MAX_SAFE_INTEGER, maxFitness = 0;\n\n      for (let j = 0; j < this.state.populationCount; j++) { // Pre kazdeho jedinca zbehnem simulaciu\n        let results = this.runOneIndividual(generation[j], fitnessArray, fitnessSumArray, fitnessSum, bestIndividual);\n        fitnessSum = results.fitnessSum;\n        if (results.fitness > maxFitness)\n          maxFitness = results.fitness;\n\n        if (results.fitness < minFitness)\n          minFitness = results.fitness;\n\n        if (results.fitness > bestIndividual.results.fitness)\n          bestIndividual = { results };\n\n        if (results.success) {\n          break outerArray;\n        }\n      }\n\n      let desiredCount = this.getDesiredCount(); // Pocet jedincov, ktorych chceme dostat krizenim\n      statistics.push({ name: i, averageFitness: (fitnessSum / this.state.populationCount).toFixed(2), minFitness, maxFitness }); // Do statistik vlozime objekt, ktory hovori o fitness hodnotach\n\n      while (newGeneration.length < desiredCount) { // Pokym nemam kompletnu novu populaciu\n        if (this.state.parentSelection === parentSelection.roulette)\n          this.applyRoulette(fitnessSum, fitnessSumArray, generation, newGeneration);\n        else\n          this.applyTournament(fitnessArray, generation, newGeneration);\n      }\n\n      if (this.state.elitism)\n        this.pushBestInvidivuals(fitnessArray, generation, newGeneration, desiredCount);\n\n      generation = newGeneration;\n    }\n\n    bestIndividual.results.success ? // Ak sa naslo riesenie\n      this.setState({ finished: true, success: true, loading: false, statistics, successfulIndividual: bestIndividual, generation }) :\n      this.setState({ finished: true, success: false, loading: false, statistics, successfulIndividual: bestIndividual, generation });\n  }\n\n  startSimulation = (e, firstPopulation) => {\n    this.setState({ finished: false, settingsEnabled: false, loading: true });\n    setTimeout(() => this.startComputations(e, firstPopulation), 50); // SetTimeout pre stihnutie vyobrazenia nacitavania\n  }\n\n  // Konverzia desiatkove cisla na 8 bitove binarne\n  dec2bin = dec => {\n    return (dec >>> 0).toString(2).padStart(8, '0');\n  }\n\n  bin2dec = bin => {\n    return parseInt(bin, 2);\n  }\n\n  getInstruction = dec => {\n    return this.dec2bin(dec).substring(0, 2);\n  }\n\n  getAdress = dec => {\n    return this.dec2bin(dec).substring(2, 8);\n  }\n\n  getLast2Bits = dec => {\n    return this.dec2bin(dec).substring(6, 8);\n  }\n\n  // Klonovanie jedinca\n  cloneIndividual = individual => {\n    return individual.map(item => {\n      return item;\n    });\n  }\n\n  // Klonovanie gridu\n  cloneGrid = grid => {\n    return grid.map(outerArray => {\n      return outerArray.map(number => {\n        return number;\n      });\n    });\n  }\n\n  // Hladanie hraca v gride\n  findPlayer = grid => {\n    for (let y = 0; y < this.state.gridSize; y++) {\n      for (let x = 0; x < this.state.gridSize; x++) {\n        if (grid[y][x] === 2) {\n          return { playerX: x, playerY: y };\n        }\n      }\n    }\n    throw new Error(\"Player not found\");\n  }\n\n  changeGrid = (oldX, oldY, newX, newY, grid, stats) => {\n    if (newY < 0 || newY >= this.state.gridSize || newX < 0 || newX >= this.state.gridSize)\n      return false; // Hrac vysiel z mriezky, nema zmysel pokracovat\n\n    if (grid[newY][newX] === 1) // Hrac nasiel poklad\n      stats.treasuresFound++;\n\n    grid[oldY][oldX] = 0; // Premazem staru poziciu\n    grid[newY][newX] = 2; // Premazem poklad, teda nastavim hraca na danu poziciu.\n\n    return true;\n  }\n\n  applyMove = (moveNumber, grid, stats) => {\n    const { playerX, playerY } = this.findPlayer(grid); // Ziskam suradnicu hraca\n    stats.moveCount++; // Urobil som krok\n\n    let success;\n    switch (moveNumber) { // Podla cisla pohybu urobim krok\n      case 0:\n        success = this.changeGrid(playerX, playerY, playerX, playerY - 1, grid, stats);\n        break;\n      case 1:\n        success = this.changeGrid(playerX, playerY, playerX, playerY + 1, grid, stats);\n        break;\n      case 2:\n        success = this.changeGrid(playerX, playerY, playerX + 1, playerY, grid, stats);\n        break;\n      case 3:\n        success = this.changeGrid(playerX, playerY, playerX - 1, playerY, grid, stats);\n        break;\n      default:\n        throw new Error(\"Bad move\");\n    }\n\n    return success;\n  }\n\n  runSimulation = individual => {\n    let grid = this.cloneGrid(this.state.grid); // Klonovanie gridu, aby sme nemodifikovali povodny\n    let stats = { // Informacia o najdenych pokladoch a vykonanych krokoch\n      treasuresFound: 0,\n      instructionCount: 0,\n      grid,\n      moveCount: 0,\n      success: null,\n      moves: []\n    };\n    let firstTime = true;\n\n    while (firstTime || this.state.continue) { // Ak chcem pokracovat od zaciatku\n      firstTime = false;\n      for (let i = 0; i < individual.length; i++) { // Podla poctu buniek\n        if (stats.instructionCount === 500) // Prebehlo 500 krokov\n          return { ...stats, success: false };\n        let instruction = parseInt(this.getInstruction(individual[i]), 2);\n        let address = parseInt(this.getAdress(individual[i]), 2);\n        switch (instruction) {\n          case 0: // Inkrementácia\n            individual[address] = individual[address] === 255 ? 0 : individual[address] + 1;\n            stats.instructionCount++;\n            break;\n          case 1: // Dekrementácia\n            individual[address] = individual[address] === 0 ? 255 : individual[address] - 1;\n            stats.instructionCount++;;\n            break;\n          case 2: // Skok\n            i = address;\n            stats.instructionCount++;\n            continue;\n          case 3: // Výpis\n            const moveNumber = parseInt(this.getLast2Bits(individual[address]), 2);\n            stats.moves.push(moveNumber);\n            stats.instructionCount++;\n            const validMove = this.applyMove(moveNumber, grid, stats);\n            if (!validMove) // Hrac vysiel mimo mapy\n              return { ...stats, success: false, error: true };\n\n            if (stats.treasuresFound === this.state.count)  // Hrac nasiel vsetky poklady\n              return { ...stats, success: true };\n\n            if (stats.instructionCount === 500) // Prebehlo 500 krokov\n              return { ...stats, success: false };\n            break;\n          default:\n            throw new Error(\"Chyba\");\n        }\n      }\n    }\n\n    return { ...stats, success: false };\n  }\n\n  render() {\n    return (\n      <div className=\"mx-auto\">\n        <Box className=\"m-5\">\n          <Grid className=\"mx-auto\" container spacing={2}>\n            <Grid item xs={4} className=\"mx-auto\">\n              <Settings\n                handleChangeGrid={this.handleChangeGrid}\n                generatePositions={this.generatePositions}\n                gridSize={this.state.gridSize}\n                handleChange={this.handleChange}\n                handleSlider={this.handleSlider}\n                handleSwitch={this.handleSwitch}\n                x={this.state.x}\n                y={this.state.y}\n                count={this.state.count}\n                startSimulation={this.startSimulation}\n                showFile={this.showFile}\n                setPopulation={this.setPopulation}\n                populationCount={this.state.populationCount}\n                continue={this.state.continue}\n                generationCount={this.state.generationCount}\n                setGenerations={this.setGenerations}\n                elitism={this.state.elitism}\n                parentSelection={this.state.parentSelection}\n                elitismRatio={this.state.elitismRatio}\n                grid={this.state.grid}\n                mutationChance={this.state.mutationChance}\n                finished={this.state.finished}\n                continueSimulation={this.continueSimulation}\n                endSimulation={this.endSimulation}\n                success={this.state.success}\n                settingsEnabled={this.state.settingsEnabled}\n              />\n            </Grid>\n            <Grid className=\"mt-5\" item xs={4}>\n              <Gamegrid\n                grid={this.state.grid}\n                finished={this.state.finished}\n                successfulIndividual={this.state.successfulIndividual} />\n            </Grid>\n            <Grid item xs={4}>\n              <Results\n                finished={this.state.finished}\n                success={this.state.success}\n                successfulIndividual={this.state.successfulIndividual}\n                statistics={this.state.statistics}\n              />\n            </Grid>\n          </Grid>\n          {this.state.finished &&\n            <ResponsiveContainer height={300} width=\"100%\">\n              <LineChart data={this.state.statistics}\n                margin={{ top: 30, right: 30, left: 30, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"5 5\" stroke=\"#808080\" />\n                <XAxis allowDecimals={false} tickCount={25} dataKey=\"name\" type=\"number\" />\n                <YAxis tickCount={6} type=\"number\" />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotoneX\" dot={false} name=\"Priemerná fitness hodnota generácie\" dataKey=\"averageFitness\" stroke=\"#8884d8\" />\n                <Line type=\"monotoneX\" dot={false} name=\"Minimálna fitness hodnota generácie\" dataKey=\"minFitness\" stroke=\"#ff0000\" />\n                <Line type=\"monotoneX\" dot={false} name=\"Maximálna fitness hodnota generácie\" dataKey=\"maxFitness\" stroke=\"#0040ff\" />\n              </LineChart>\n            </ResponsiveContainer>\n          }\n          <Backdrop\n            sx={{ color: '#fff', zIndex: (theme) => 200 }}\n            open={this.state.loading}\n          >\n            <CircularProgress color=\"inherit\" />\n          </Backdrop>\n        </Box>\n      </div >\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport App from './App';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}
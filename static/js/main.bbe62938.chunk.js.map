{"version":3,"sources":["const.js","Settings.js","Grid.js","Results.js","App.js","index.js"],"names":["parentSelection","Settings","valueText","value","valueMs","getSimulationDisabled","props","grid","length","animationRunning","y","gridSize","x","getEndDrawDisabled","successfulIndividual","results","stats","actualGrid","className","FormControl","variant","sx","m","minWidth","InputLabel","id","Select","labelId","disabled","this","settingsEnabled","name","label","onChange","handleChangeGrid","MenuItem","count","Array","map","i","TextField","handleChange","populationCount","onBlur","setPopulation","generationCount","setGenerations","Box","width","Typography","Slider","handleSlider","tournamentCount","valueLabelDisplay","size","step","marks","min","max","mutationChance","valueLabelFormat","FormControlLabel","control","Switch","checked","elitism","handleSwitch","elitismRatio","getAriaValueText","continue","animationDelay","Button","onClick","generatePositions","component","e","showFile","type","hidden","startSimulation","finished","success","continueSimulation","endSimulation","startAnimation","displayEnd","React","Grid","prevProps","prevState","drawStart","console","log","array","idx","number","idy","src","process","alt","concat","style","position","left","top","Results","getMoveString","move","Error","moveCount","treasuresFound","moves","App","setState","target","createGrid","generateRandomPosition","Math","floor","random","state","from","insertTreasures","coordinates","a","preventDefault","reader","FileReader","onload","text","result","split","item","parseInt","readAsText","files","Number","isNaN","generateCell","chooseFromInterval","findIndex","fitnessArray","createFirstPopulation","population","individual","j","push","mergeIndividuals","individual1","individual2","newIndividual","randomIndex","replaceString","string","index","replacement","substr","mutateIndivual","bitPosition","binaryIndividual","dec2bin","newBit","bin2dec","pushBestInvidivuals","generation","newGeneration","desiredCount","combinedArray","sort","b","fitness","getDesiredCount","runOneIndividual","fitnessSumArray","fitnessSum","cloneIndividual","runSimulation","returnObject","undefined","sucessIndividual","applyRoulette","index1","index2","newIndividual1","newIndividual2","getRandomIndexes","indexArray","includes","findStrongest","indexes","maxFitness","itemIndex","forEach","applyTournament","indexes1","indexes2","startComputations","firstPopulation","bestIndividual","statistics","outerArray","minFitness","MAX_SAFE_INTEGER","averageFitness","toFixed","loading","setTimeout","dec","toString","padStart","bin","getInstruction","substring","getAdress","getLast2Bits","cloneGrid","findPlayer","playerX","playerY","changeGrid","oldX","oldY","newX","newY","applyMove","moveNumber","instructionCount","firstTime","instruction","address","error","timer","ms","Promise","res","container","spacing","xs","ResponsiveContainer","height","LineChart","data","margin","right","bottom","CartesianGrid","strokeDasharray","stroke","XAxis","allowDecimals","tickCount","dataKey","YAxis","Tooltip","Legend","Line","dot","Backdrop","color","zIndex","theme","open","CircularProgress","Component","darkTheme","createTheme","palette","mode","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.bbe62938.chunk.js","sourcesContent":["export const parentSelection = {\n  roulette: 0,\n  tournament: 1\n}","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport TextField from '@mui/material/TextField';\nimport Select from '@mui/material/Select';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Switch from '@mui/material/Switch';\nimport Slider from '@mui/material/Slider';\nimport { parentSelection } from './const';\n\nexport default class Settings extends React.Component {\n\n  valueText = value => {\n    return `${value}%`;\n  }\n\n  valueMs = value => {\n    return `${value} ms`;\n  }\n\n  getSimulationDisabled = () => {\n    if (!this.props.grid.length || this.props.animationRunning)\n      return true;\n\n    for (let y = 0; y < this.props.gridSize; y++) {\n      for (let x = 0; x < this.props.gridSize; x++) {\n        if (this.props.grid?.[y]?.[x] === 1)\n          return false;\n      }\n    }\n\n    return true;\n  }\n\n  getEndDrawDisabled = () => {\n    if (this.props.animationRunning)\n      return true;\n\n    for (let y = 0; y < this.props.gridSize; y++) {\n      for (let x = 0; x < this.props.gridSize; x++) {\n        if (this.props.successfulIndividual?.results?.stats?.grid?.[y]?.[x] !== this.props.actualGrid?.[y]?.[x])\n          return false;\n      }\n    }\n\n    return true;\n  }\n\n  render() {\n    return (\n      <div className=\"settings\">\n        <h2 className=\"m-2\">Úvodné nastavenie</h2>\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <InputLabel id=\"gridLabel\">Veľkosť mriežky</InputLabel>\n          <Select\n            labelId=\"gridLabel\"\n            disabled={!this.props.settingsEnabled}\n            id=\"gridSize\"\n            name=\"gridSize\"\n            value={this.props.gridSize}\n            label=\"Veľkosť mriežky\"\n            onChange={this.props.handleChangeGrid}\n          >\n            <MenuItem value={5}>5x5</MenuItem>\n            <MenuItem value={6}>6x6</MenuItem>\n            <MenuItem value={7}>7x7</MenuItem>\n            <MenuItem value={8}>8x8</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <InputLabel id=\"countLabel\">Počet pokladov</InputLabel>\n          <Select\n            labelId=\"countLabel\"\n            disabled={!this.props.settingsEnabled}\n            id=\"count\"\n            name=\"count\"\n            value={this.props.count}\n            label=\"Počet pokladov\"\n            onChange={this.props.handleChangeGrid}\n          >\n            {[...Array(10)].map((i, y) =>\n              <MenuItem key={y} value={y + 1}>{y + 1}</MenuItem>\n            )}\n          </Select>\n        </FormControl>\n        <br />\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <InputLabel id=\"xLabel\">Začiatočná pozícia x</InputLabel>\n          <Select\n            labelId=\"xLabel\"\n            id=\"x\"\n            disabled={!this.props.settingsEnabled}\n            name=\"x\"\n            value={this.props.x}\n            label=\"Začiatočná pozícia x\"\n            onChange={this.props.handleChangeGrid}\n          >\n            {[...Array(this.props.gridSize)].map((i, x) =>\n              <MenuItem key={x} value={x}>{x}</MenuItem>\n            )}\n          </Select>\n        </FormControl>\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <InputLabel id=\"yLabel\">Začiatočná pozícia y</InputLabel>\n          <Select\n            labelId=\"yLabel\"\n            id=\"y\"\n            disabled={!this.props.settingsEnabled}\n            name=\"y\"\n            value={this.props.y}\n            label=\"Začiatočná pozícia y\"\n            onChange={this.props.handleChangeGrid}\n          >\n            {[...Array(this.props.gridSize)].map((i, y) =>\n              <MenuItem key={y} value={y}>{y}</MenuItem>\n            )}\n          </Select>\n        </FormControl>\n        <br />\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <TextField\n            onChange={this.props.handleChange}\n            name=\"populationCount\"\n            disabled={!this.props.settingsEnabled}\n            id=\"populationCount\"\n            label=\"Počet jedincov v populácii\"\n            value={this.props.populationCount}\n            onBlur={this.props.setPopulation}\n            variant=\"filled\"\n          />\n        </FormControl>\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <TextField\n            onChange={this.props.handleChange}\n            id=\"generationCount\"\n            disabled={!this.props.settingsEnabled}\n            name=\"generationCount\"\n            label=\"Počet generácii\"\n            value={this.props.generationCount}\n            onBlur={this.props.setGenerations}\n            variant=\"filled\"\n          />\n        </FormControl>\n        <br />\n        <FormControl variant=\"filled\" sx={{ m: 1, minWidth: 200 }}>\n          <InputLabel id=\"parentSelectionLabel\">Spôsob výberu jedincov</InputLabel>\n          <Select\n            labelId=\"parentSelectionLabel\"\n            id=\"parentSelection\"\n            disabled={!this.props.settingsEnabled}\n            name=\"parentSelection\"\n            value={this.props.parentSelection}\n            label=\"Spôsob výberu jedincov\"\n            onChange={this.props.handleChange}\n          >\n            <MenuItem value={parentSelection.roulette}>Ruleta</MenuItem>\n            <MenuItem value={parentSelection.tournament}>Turnaj</MenuItem>\n          </Select>\n        </FormControl>\n        {\n          (this.props.parentSelection === parentSelection.tournament) &&\n          <Box className=\"box\" sx={{ width: 200 }}>\n            <Typography>Počet jedincov do turnaja</Typography>\n            <Slider\n              aria-label=\"Počet jedincov do turnaja\"\n              name=\"tournamentCount\"\n              onChange={this.props.handleSlider}\n              disabled={!this.props.settingsEnabled}\n              value={this.props.tournamentCount}\n              valueLabelDisplay=\"on\"\n              size=\"small\"\n              step={1}\n              className=\"tournamentSlider\"\n              marks\n              min={2}\n              max={5}\n            />\n          </Box>\n        }\n        <div className=\"m-2\">\n          <Box className=\"box2\" sx={{ width: 420 }}>\n            <Typography className=\"chance\">Šanca na mutáciu</Typography>\n            <Slider\n              aria-label=\"Šanca na mutáciu\"\n              name=\"mutationChance\"\n              onChange={this.props.handleSlider}\n              disabled={!this.props.settingsEnabled}\n              value={this.props.mutationChance}\n              valueLabelFormat={this.valueText}\n              valueLabelDisplay=\"on\"\n              step={1}\n              className=\"mutationSlider\"\n              marks\n              min={1}\n              max={10}\n            />\n          </Box>\n        </div>\n        <div className=\"m-2 sliders\">\n          <Box sx={{ width: 420 }}>\n            <FormControl>\n              <FormControlLabel control={<Switch disabled={!this.props.settingsEnabled} checked={this.props.elitism} name=\"elitism\" onChange={this.props.handleSwitch} />} label=\"Elitárstvo\" />\n            </FormControl>\n            {this.props.elitism &&\n              <Slider\n                className=\"slider\"\n                aria-label=\"Podiel elitárstva\"\n                name=\"elitismRatio\"\n                disabled={!this.props.settingsEnabled}\n                onChange={this.props.handleSlider}\n                value={this.props.elitismRatio}\n                getAriaValueText={this.valueText}\n                valueLabelDisplay=\"on\"\n                valueLabelFormat={this.valueText}\n                step={1}\n                marks\n                min={5}\n                max={25}\n              />\n            }\n          </Box>\n          <FormControl>\n            <FormControlLabel control={<Switch disabled={!this.props.settingsEnabled} checked={this.props.continue} name=\"continue\" onChange={this.props.handleSwitch} />} label=\"Pokračovať po poslednej bunke\" />\n          </FormControl>\n          <br />\n          <FormControl>\n            <Typography className=\"chance\">Pauza medzi snímkami animácie</Typography>\n            <Slider\n              className=\"slider mt-5\"\n              aria-label=\"Pauza medzi snímkami animácie\"\n              name=\"animationDelay\"\n              disabled={!this.props.settingsEnabled}\n              onChange={this.props.handleSlider}\n              value={this.props.animationDelay}\n              getAriaValueText={this.valueMs}\n              valueLabelDisplay=\"on\"\n              valueLabelFormat={this.valueMs}\n              step={10}\n              marks\n              min={10}\n              max={200}\n            />\n          </FormControl>\n        </div>\n        <div className=\"m-2\">\n          <Button onClick={this.props.generatePositions} disabled={!this.props.settingsEnabled} className=\"ml-5 button\" variant=\"outlined\">Vygenuruj pozície pokladov</Button>\n          <br />\n          <Button disabled={!this.props.settingsEnabled} className=\"button-2\" variant=\"outlined\" component=\"label\">\n            Nahraj súbor so súradnicami\n            <input\n              onChange={(e) => this.props.showFile(e)}\n              type=\"file\"\n              hidden\n            />\n          </Button>\n          <br />\n          <Button onClick={this.props.startSimulation} disabled={this.getSimulationDisabled()} className=\"ml-5 button-3\" variant=\"outlined\">Začať novú simuláciu</Button>\n          {(this.props.finished) &&\n            <>\n              {!this.props.success &&\n                <Button onClick={this.props.continueSimulation} disabled={this.props.animationRunning} className=\"ml-5 button-3\" variant=\"outlined\">Pokračuj simuláciu</Button>\n              }\n              <Button onClick={this.props.endSimulation} disabled={this.props.animationRunning} className=\"ml-5 button-3\" variant=\"outlined\">Skonči simuláciu</Button>\n              <Button onClick={this.props.startAnimation} disabled={this.props.animationRunning} className=\"ml-5 button-3\" variant=\"outlined\">Vykresli animáciu</Button>\n              <Button onClick={this.props.displayEnd} disabled={this.getEndDrawDisabled()} className=\"ml-5 button-3\" variant=\"outlined\">Vykresli koniec</Button>\n            </>\n          }\n        </div>\n      </div >\n    );\n  }\n}","import * as React from 'react';\nimport './grid.css';\n\nexport default class Grid extends React.Component {\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.finished !== this.props.finished && this.props.finished) {\n      this.props.drawStart();\n    }\n  }\n\n  render() {\n    console.log(this.props.successfulIndividual)\n    return (\n      <>\n        {this.props.grid.length ? <h2>Začiatočný stav</h2> : null}\n        {this.props.grid?.map((array, idx) => {\n          return array?.map((number, idy) => {\n            return number === 0 ?\n              <div key={`${idx}${idy}`} className=\"cell\"></div> :\n              number === 1 ?\n                <div key={`${idx}${idy}`} className=\"cell\">\n                  <img src={process.env.PUBLIC_URL + '/images/treasure.png'} alt=\"Poklad\" />\n                </div> :\n                <div key={`${idx}${idy}`} className=\"cell player\">\n                  <img src={process.env.PUBLIC_URL + '/images/miner.png'} alt=\"Hľadač\" />\n                </div>\n          }).concat(<div key={idx} className=\"separator\" />);\n        })}\n        <div className=\"mt-2 final-grid \">\n          {this.props.finished && <h2>Koncový stav</h2>}\n          {this.props.finished && this.props.grid?.map((array, idx) => {\n            return array?.map((number, idy) => {\n              return <div key={`${idx}${idy}`} className=\"cell\"></div>\n            }).concat(<div key={idx} className=\"separator\" />);\n          })}\n          {this.props.finished && this.props.actualGrid?.map((array, idx) => {\n            return array?.map((number, idy) => {\n              return number === 1 ?\n                <img key={`${idx}${idy}`} className=\"player img\" style={{ position: \"absolute\", left: idy * 50 + 'px', top: idx * 49 + 46 + 'px' }} src={process.env.PUBLIC_URL + '/images/treasure.png'} alt=\"Poklad\" /> : number === 2 ?\n                  <img key={`${idx}${idy}`} className=\"treasure img\" style={{ position: \"absolute\", left: idy * 50 + 'px', top: idx * 49 + 46 + 'px' }} src={process.env.PUBLIC_URL + '/images/miner.png'} alt=\"Hľadač\" /> : null;\n            }).concat(<div key={idx} className=\"separator\" />);\n          })}\n        </div>\n      </>\n    )\n  }\n}","import * as React from 'react';\n\nexport default class Results extends React.Component {\n\n  getMoveString = move => {\n    switch (move) {\n      case 0:\n        return \"Hore\";\n      case 1:\n        return \"Dole\";\n      case 2:\n        return \"Doprava\";\n      case 3:\n        return \"Doľava\";\n      default:\n        throw new Error(\"Bad move\");\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {this.props.finished &&\n          <>\n            {this.props.successfulIndividual?.results?.stats?.success ?\n              <h2>Boli úspešné nájdené všetky poklady</h2> :\n              <h2>Neboli úspešné nájdené všetky poklady</h2>}\n            <h4>Počet krokov: {this.props.successfulIndividual?.results?.stats?.moveCount}</h4>\n            <h4>Nájdených pokladov: {this.props.successfulIndividual?.results?.stats?.treasuresFound}</h4>\n            <h4>Postupnosť krokov</h4>\n            <div>\n              {this.props.successfulIndividual?.results?.stats?.moves?.map((move, idx) => {\n                return <p key={idx} className=\"move\">{`${this.getMoveString(move)}, `}</p>\n              })}\n            </div>\n          </>\n        }\n      </>\n    )\n  }\n}","import Settings from './Settings';\nimport Gamegrid from './Grid';\nimport React from 'react';\nimport Results from './Results';\nimport Box from '@mui/material/Box';\nimport Backdrop from '@mui/material/Backdrop';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Grid from '@mui/material/Grid';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { parentSelection } from './const';\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gridSize: 5,\n      grid: [],\n      actualGrid: [],\n      x: 0,\n      y: 0,\n      count: 1,\n      populationCount: 20,\n      animationDelay: 10,\n      generationCount: 20,\n      continue: true,\n      elitism: true,\n      elitismRatio: 10,\n      tournamentCount: 2,\n      parentSelection: parentSelection.roulette,\n      mutationChance: 10,\n      finished: false,\n      success: false,\n      settingsEnabled: true,\n      loading: false,\n      statistics: [],\n      successfulIndividual: {}\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.gridSize !== this.state.gridSize ||\n      prevState.populationCount !== this.state.populationCount ||\n      prevState.generationCount !== this.state.generationCount ||\n      prevState.elitism !== this.state.elitism ||\n      prevState.elitismRatio !== this.state.elitismRatio ||\n      prevState.tournamentCount !== this.state.tournamentCount ||\n      prevState.mutationChance !== this.state.mutationChance ||\n      prevState.x !== this.state.x ||\n      prevState.y !== this.state.y) {\n      this.setState({ finished: false });\n    }\n  }\n\n  handleChangeGrid = e => {\n    this.setState({ [e.target.name]: e.target.value }, () => {\n      if (e.target.name === 'gridSize')\n        this.setState({ x: 0, y: 0 }, () => {\n          this.setState({ grid: this.createGrid() });\n        });\n      else if (e.target.name === 'count')\n        this.generatePositions();\n      else\n        this.setState({ grid: this.createGrid() });\n    });\n  }\n\n  handleSwitch = e => {\n    this.setState({ [e.target.name]: e.target.checked });\n  }\n\n  handleSlider = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  generateRandomPosition = () => {\n    return Math.floor(Math.random() * this.state.gridSize);\n  }\n\n  generatePositions = () => {\n    let grid = this.createGrid();\n\n    // Podla poctu pokladov\n    for (let i = 0; i < this.state.count; i++) {\n      while (true) { // Generujeme poziciu\n        let x = this.generateRandomPosition();\n        let y = this.generateRandomPosition();\n\n        if (grid[y][x] === 0) {   // Overenie, ci sa na danej pozicii uz nenachadza poklad\n          grid[y][x] = 1; // Umiestnenie pokladu\n          break;\n        }\n      }\n    }\n\n    this.setState({ grid, finished: false });\n  }\n\n  // Vytvorenie 2d pola, so samymi nulami\n  createGrid = () => {\n    let gridSize = this.state.gridSize;\n    let grid = Array.from({ length: gridSize }, () => (Array.from({ length: gridSize }, () => 0)));\n    grid[this.state.y][this.state.x] = 2; // Náš hráč sa nachádza na tejto pozícii\n\n    return grid;\n  }\n\n  insertTreasures = coordinates => {\n    let grid = this.createGrid();\n    for (let i = 0; i < coordinates.length; i++) {\n      let [x, y] = coordinates[i];\n      grid[y][x] = 1;\n    }\n\n    this.setState({ grid });\n  }\n\n  showFile = async (e) => {\n    e.preventDefault();\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const text = e.target.result; // Precitam text, urobim z neho 2d array so suradnicami - pozicie pokladov\n      let coordinates = text.split(\"\\n\").map(item => {\n        return item.split(\",\").map(item => parseInt(item));\n      });\n      this.insertTreasures(coordinates);\n      this.setState({ count: coordinates.length });\n    };\n    reader.readAsText(e.target.files[0]);\n    e.target.value = null; // Vyresetujeme input pre dalsie pouzitie\n  }\n\n  setPopulation = () => {\n    let value = Number(this.state.populationCount);\n    if (!isNaN(value)) {\n      value = value < 20 ? 20 : value % 2 === 1 ? value + 1 : value;\n      this.setState({ populationCount: value });\n    }\n    else {\n      this.setState({ populationCount: 20 });\n    }\n  }\n\n  handleChange = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  setGenerations = () => {\n    let value = this.state.generationCount;\n    if (!isNaN(value)) {\n      value = value < 20 ? 20 : value;\n      this.setState({ generationCount: value });\n    }\n    else {\n      this.setState({ generationCount: 20 });\n    }\n  }\n\n  generateCell = () => {\n    return Math.floor(Math.random() * 256);\n  }\n\n  chooseFromInterval = max => {\n    return Math.random() * max;\n  }\n\n  findIndex = (number, fitnessArray) => {\n    if (number < fitnessArray[0])\n      return 0;\n    for (let i = 0; i < this.state.populationCount; i++) {\n      if (number >= fitnessArray[i] && number <= fitnessArray[i + 1])\n        return i;\n    }\n    throw new Error(\"Number not found!\");\n  }\n\n  createFirstPopulation = () => {\n    let population = [];\n    for (let i = 0; i < this.state.populationCount; i++) { // Vytvorim si dany pocet jedincov\n      let individual = [];\n      for (let j = 0; j < 64; j++) { // Kazdy jedinec ma 64 buniek\n        individual.push(this.generateCell());\n      }\n      population.push(individual);\n    }\n\n    return population;\n  }\n\n  mergeIndividuals = (individual1, individual2) => {\n    let newIndividual = []; // Novy jedinec\n    const randomIndex = Math.floor(Math.random() * 64);\n\n    for (let i = 0; i < randomIndex; i++) { // Prva cast bude z prveho jedinca\n      newIndividual.push(individual1[i]);\n    }\n    for (let i = randomIndex; i < 64; i++) { // Druha cast z druheho jedinca\n      newIndividual.push(individual2[i]);\n    }\n\n    return newIndividual;\n  }\n\n  replaceString = (string, index, replacement) => {\n    return string.substr(0, index) + replacement + string.substr(index + 1);\n  }\n\n  mutateIndivual = individual => {\n    const number = Math.floor(Math.random() * 101); // Cislo od 0 po 100\n\n    if (this.state.mutationChance < number) { // Ak dojde k mutacii\n      const position = Math.floor(Math.random() * 64);\n      const bitPosition = Math.floor(Math.random() * 8); // Bity 0 az 7\n      let binaryIndividual = this.dec2bin(individual[position]); // Konverzia danej bunky na binarne cislo\n      let newBit = parseInt(binaryIndividual[bitPosition]) === 1 ? 0 : 1; // Obratim bit\n      binaryIndividual = this.replaceString(binaryIndividual, bitPosition, newBit) // Zmenim tento bit\n      individual[position] = this.bin2dec(binaryIndividual); // Prepisem povodnu bunku\n    }\n  }\n\n  pushBestInvidivuals = (fitnessArray, generation, newGeneration, desiredCount) => {\n    let combinedArray = [];\n    for (let j = 0; j < this.state.populationCount; j++)\n      combinedArray.push({ 'fitness': fitnessArray[j], 'individual': generation[j] });\n\n    combinedArray.sort((a, b) => (b.fitness - a.fitness));\n\n    for (let j = 0; j < this.state.populationCount - desiredCount; j++) {\n      newGeneration.push(combinedArray[j].individual);\n    }\n  }\n\n  // Funkcia pre zistenie, kolko jedincov chceme ziskat krizenim\n  getDesiredCount = () => {\n    if (this.state.elitism) {\n      let desiredCount = this.state.populationCount - Math.floor((this.state.elitismRatio / 100) * this.state.populationCount);\n      return desiredCount % 2 === 1 ? desiredCount - 1 : desiredCount;\n    } else {\n      return this.state.populationCount;\n    }\n  }\n\n  runOneIndividual = (individual, fitnessArray, fitnessSumArray, fitnessSum) => {\n    let newIndividual = this.cloneIndividual(individual);\n    const stats = this.runSimulation(newIndividual);\n    const fitness = stats.treasuresFound - 0.001 * stats.moveCount <= 0 ? 0.05 : stats.treasuresFound - 0.001 * stats.moveCount; // Výpočet fitness funkcie, priorita je počet nájdených pokladov a sekundárne počet krokov\n    fitnessArray.push(fitness); // Pole pre jednotlive fitness\n    fitnessSum += fitness; // Pripočitame fitness jedinca ku celkovej fitness\n\n    fitnessSumArray.push(fitnessSum); // Do pola zapiseme novu aktualnu celkovu hodnotu, tuto pouzijeme na ruletu\n    let returnObject = {\n      fitnessSum,\n      fitness,\n      stats,\n      success: undefined\n    };\n\n    if (stats.success) { // Hrac nasiel vsetky poklady\n      this.setState({ sucessIndividual: stats });\n      returnObject.success = true;\n      return returnObject;\n    }\n\n    returnObject.success = false;\n    return returnObject;\n  }\n\n  applyRoulette = (fitnessSum, fitnessSumArray, generation, newGeneration) => {\n    const index1 = this.findIndex(this.chooseFromInterval(fitnessSum), fitnessSumArray); // Vyber nahodnych jedincov podla fitness\n    const index2 = this.findIndex(this.chooseFromInterval(fitnessSum), fitnessSumArray);\n    if ((index1 !== index2)) { // Vyberam roznych potomkov\n      let newIndividual1 = this.mergeIndividuals(generation[index1], generation[index2]); // Krizenie\n      let newIndividual2 = this.mergeIndividuals(generation[index1], generation[index2]);\n      this.mutateIndivual(newIndividual1);\n      this.mutateIndivual(newIndividual2);\n      newGeneration.push(newIndividual1, newIndividual2);\n    }\n  }\n\n  getRandomIndexes = () => {\n    let indexArray = [];\n    while (indexArray.length < this.state.tournamentCount) { //\n      const index = Math.floor(Math.random() * this.state.populationCount);\n      if (!indexArray.includes(index)) {\n        indexArray.push(index);\n      }\n    }\n    return indexArray;\n  }\n\n  // Najdenie najsilnejsieho jedinca z turnaja\n  findStrongest = (indexes, fitnessArray, generation) => {\n    let maxFitness = 0, itemIndex = 0;\n    indexes.forEach(index => {\n      if (fitnessArray[index] > maxFitness) {\n        maxFitness = fitnessArray[index];\n        itemIndex = index;\n      }\n    });\n\n    return generation[itemIndex];\n  }\n\n  applyTournament = (fitnessArray, generation, newGeneration) => {\n    const indexes1 = this.getRandomIndexes();\n    const indexes2 = this.getRandomIndexes();\n    let individual1 = this.findStrongest(indexes1, fitnessArray, generation);\n    let individual2 = this.findStrongest(indexes2, fitnessArray, generation);\n    let newIndividual1 = this.mergeIndividuals(individual1, individual2);\n    let newIndividual2 = this.mergeIndividuals(individual1, individual2);\n    this.mutateIndivual(newIndividual1);\n    this.mutateIndivual(newIndividual2);\n    newGeneration.push(newIndividual1, newIndividual2);\n  }\n\n  continueSimulation = () => {\n    this.startSimulation(undefined, this.state.generation);\n  }\n\n  endSimulation = () => {\n    this.setState({ settingsEnabled: true, finished: false });\n  }\n\n  startComputations = (e, firstPopulation) => {\n    let population = (firstPopulation || this.createFirstPopulation()); // Buď vytvorim novu populaciu, alebo zoberiem prechadzajucu\n    let generation = population;\n    let bestIndividual = { results: { fitness: 0, success: false } };\n    let statistics = []; // Statistiky pre graf\n\n    outerArray:\n    for (let i = 0; i < this.state.generationCount; i++) { // Podla poctu pozadovanych generacii\n      let newGeneration = [], fitnessArray = [], fitnessSumArray = [], fitnessSum = 0, minFitness = Number.MAX_SAFE_INTEGER, maxFitness = 0;\n\n      for (let j = 0; j < this.state.populationCount; j++) { // Pre kazdeho jedinca zbehnem simulaciu\n        let results = this.runOneIndividual(generation[j], fitnessArray, fitnessSumArray, fitnessSum, bestIndividual);\n        fitnessSum = results.fitnessSum;\n        if (results.fitness > maxFitness)\n          maxFitness = results.fitness;\n\n        if (results.fitness < minFitness)\n          minFitness = results.fitness;\n\n        if (results.fitness > bestIndividual.results.fitness)\n          bestIndividual = { results };\n\n        if (results.success) {\n          break outerArray;\n        }\n      }\n\n      let desiredCount = this.getDesiredCount(); // Pocet jedincov, ktorych chceme dostat krizenim\n      statistics.push({ name: i, averageFitness: (fitnessSum / this.state.populationCount).toFixed(2), minFitness, maxFitness }); // Do statistik vlozime objekt, ktory hovori o fitness hodnotach\n\n      while (newGeneration.length < desiredCount) { // Pokym nemam kompletnu novu populaciu\n        if (this.state.parentSelection === parentSelection.roulette)\n          this.applyRoulette(fitnessSum, fitnessSumArray, generation, newGeneration);\n        else\n          this.applyTournament(fitnessArray, generation, newGeneration);\n      }\n\n      if (this.state.elitism)\n        this.pushBestInvidivuals(fitnessArray, generation, newGeneration, desiredCount);\n\n      generation = newGeneration;\n    }\n\n    bestIndividual.results.success ? // Ak sa naslo riesenie\n      this.setState({ finished: true, success: true, loading: false, statistics, successfulIndividual: bestIndividual, generation }) :\n      this.setState({ finished: true, success: false, loading: false, statistics, successfulIndividual: bestIndividual, generation });\n\n  }\n\n  startSimulation = (e, firstPopulation) => {\n    this.setState({ finished: false, settingsEnabled: false, loading: true });\n    setTimeout(() => this.startComputations(e, firstPopulation), 100); // SetTimeout pre stihnutie vyobrazenia nacitavania\n  }\n\n  // Konverzia desiatkove cisla na 8 bitove binarne\n  dec2bin = dec => {\n    return (dec >>> 0).toString(2).padStart(8, '0');\n  }\n\n  bin2dec = bin => {\n    return parseInt(bin, 2);\n  }\n\n  getInstruction = dec => {\n    return this.dec2bin(dec).substring(0, 2);\n  }\n\n  getAdress = dec => {\n    return this.dec2bin(dec).substring(2, 8);\n  }\n\n  getLast2Bits = dec => {\n    return this.dec2bin(dec).substring(6, 8);\n  }\n\n  // Klonovanie jedinca\n  cloneIndividual = individual => {\n    return individual.map(item => {\n      return item;\n    });\n  }\n\n  // Klonovanie gridu\n  cloneGrid = grid => {\n    return grid.map(outerArray => {\n      return outerArray.map(number => {\n        return number;\n      });\n    });\n  }\n\n  // Hladanie hraca v gride\n  findPlayer = grid => {\n    for (let y = 0; y < this.state.gridSize; y++) {\n      for (let x = 0; x < this.state.gridSize; x++) {\n        if (grid[y][x] === 2) {\n          return { playerX: x, playerY: y };\n        }\n      }\n    }\n    throw new Error(\"Player not found\");\n  }\n\n  changeGrid = (oldX, oldY, newX, newY, grid, stats) => {\n    if (newY < 0 || newY >= this.state.gridSize || newX < 0 || newX >= this.state.gridSize)\n      return false; // Hrac vysiel z mriezky, nema zmysel pokracovat\n\n    if (grid[newY][newX] === 1) // Hrac nasiel poklad\n      stats.treasuresFound++;\n\n    grid[oldY][oldX] = 0; // Premazem staru poziciu\n    grid[newY][newX] = 2; // Premazem poklad, teda nastavim hraca na danu poziciu.\n\n    return true;\n  }\n\n  applyMove = (moveNumber, grid, stats) => {\n    const { playerX, playerY } = this.findPlayer(grid); // Ziskam suradnicu hraca\n    stats.moveCount++; // Urobil som krok\n\n    let success;\n    switch (moveNumber) { // Podla cisla pohybu urobim krok\n      case 0:\n        success = this.changeGrid(playerX, playerY, playerX, playerY - 1, grid, stats);\n        break;\n      case 1:\n        success = this.changeGrid(playerX, playerY, playerX, playerY + 1, grid, stats);\n        break;\n      case 2:\n        success = this.changeGrid(playerX, playerY, playerX + 1, playerY, grid, stats);\n        break;\n      case 3:\n        success = this.changeGrid(playerX, playerY, playerX - 1, playerY, grid, stats);\n        break;\n      default:\n        throw new Error(\"Bad move\");\n    }\n\n    return success;\n  }\n\n  runSimulation = individual => {\n    let grid = this.cloneGrid(this.state.grid); // Klonovanie gridu, aby sme nemodifikovali povodny\n    let stats = { // Informacia o najdenych pokladoch a vykonanych krokoch\n      treasuresFound: 0,\n      instructionCount: 0,\n      grid,\n      moveCount: 0,\n      success: null,\n      moves: []\n    };\n    let firstTime = true;\n\n    while (firstTime || this.state.continue) { // Ak chcem pokracovat od zaciatku\n      firstTime = false;\n      for (let i = 0; i < individual.length; i++) { // Podla poctu buniek\n        if (stats.instructionCount === 500) // Prebehlo 500 krokov\n          return { ...stats, success: false };\n        let instruction = parseInt(this.getInstruction(individual[i]), 2);\n        let address = parseInt(this.getAdress(individual[i]), 2);\n        switch (instruction) {\n          case 0: // Inkrementácia\n            individual[address] = individual[address] === 255 ? 0 : individual[address] + 1;\n            stats.instructionCount++;\n            break;\n          case 1: // Dekrementácia\n            individual[address] = individual[address] === 0 ? 255 : individual[address] - 1;\n            stats.instructionCount++;;\n            break;\n          case 2: // Skok\n            i = address;\n            stats.instructionCount++;\n            continue;\n          case 3: // Výpis\n            const moveNumber = parseInt(this.getLast2Bits(individual[address]), 2);\n            stats.moves.push(moveNumber);\n            stats.instructionCount++;\n            const validMove = this.applyMove(moveNumber, grid, stats);\n            if (!validMove) // Hrac vysiel mimo mapy\n              return { ...stats, success: false, error: true };\n\n            if (stats.treasuresFound === this.state.count)  // Hrac nasiel vsetky poklady\n              return { ...stats, success: true };\n\n            if (stats.instructionCount === 500) // Prebehlo 500 krokov\n              return { ...stats, success: false };\n            break;\n          default:\n            throw new Error(\"Chyba\");\n        }\n      }\n    }\n\n    return { ...stats, success: false };\n  }\n\n  timer = ms => new Promise(res => setTimeout(res, ms));\n\n  drawStart = () => {\n    this.setState({ actualGrid: this.state.grid });\n  }\n\n  startAnimation = async () => {\n    let actualGrid = this.cloneGrid(this.state.grid);\n    const moves = this.state.successfulIndividual.results.stats.moves;\n    let stats = { moveCount: 0 };\n    this.setState({ animationRunning: true });\n\n    for (let i = 0; i < moves.length; i++) {\n      this.applyMove(moves[i], actualGrid, stats);\n      this.setState({ actualGrid });\n      await this.timer(this.state.animationDelay);\n    }\n\n    this.setState({ animationRunning: false });\n  }\n\n  displayEnd = () => {\n    this.setState({ actualGrid: this.state.successfulIndividual.results.stats.grid });\n  }\n\n  render() {\n    return (\n      <div className=\"mx-auto\">\n        <Box className=\"m-5\">\n          <Grid className=\"mx-auto\" container spacing={2}>\n            <Grid item xs={4} className=\"mx-auto\">\n              <Settings\n                handleChangeGrid={this.handleChangeGrid}\n                generatePositions={this.generatePositions}\n                gridSize={this.state.gridSize}\n                handleChange={this.handleChange}\n                handleSlider={this.handleSlider}\n                handleSwitch={this.handleSwitch}\n                x={this.state.x}\n                y={this.state.y}\n                count={this.state.count}\n                startSimulation={this.startSimulation}\n                showFile={this.showFile}\n                setPopulation={this.setPopulation}\n                populationCount={this.state.populationCount}\n                continue={this.state.continue}\n                generationCount={this.state.generationCount}\n                setGenerations={this.setGenerations}\n                elitism={this.state.elitism}\n                parentSelection={this.state.parentSelection}\n                elitismRatio={this.state.elitismRatio}\n                grid={this.state.grid}\n                mutationChance={this.state.mutationChance}\n                finished={this.state.finished}\n                continueSimulation={this.continueSimulation}\n                endSimulation={this.endSimulation}\n                success={this.state.success}\n                settingsEnabled={this.state.settingsEnabled}\n                startAnimation={this.startAnimation}\n                animationRunning={this.state.animationRunning}\n                displayEnd={this.displayEnd}\n                actualGrid={this.state.actualGrid}\n                successfulIndividual={this.state.successfulIndividual}\n              />\n            </Grid>\n            <Grid className=\"mt-5\" item xs={4}>\n              <Gamegrid\n                grid={this.state.grid}\n                finished={this.state.finished}\n                successfulIndividual={this.state.successfulIndividual}\n                drawStart={this.drawStart}\n                actualGrid={this.state.actualGrid}\n              />\n            </Grid>\n            <Grid item xs={4}>\n              <Results\n                finished={this.state.finished}\n                success={this.state.success}\n                successfulIndividual={this.state.successfulIndividual}\n                statistics={this.state.statistics}\n              />\n            </Grid>\n          </Grid>\n          {this.state.finished &&\n            <ResponsiveContainer height={300} width=\"100%\">\n              <LineChart data={this.state.statistics}\n                margin={{ top: 30, right: 30, left: 30, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"5 5\" stroke=\"#808080\" />\n                <XAxis allowDecimals={false} tickCount={25} dataKey=\"name\" type=\"number\" />\n                <YAxis tickCount={6} type=\"number\" />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotoneX\" dot={false} name=\"Priemerná fitness hodnota generácie\" dataKey=\"averageFitness\" stroke=\"#8884d8\" />\n                <Line type=\"monotoneX\" dot={false} name=\"Minimálna fitness hodnota generácie\" dataKey=\"minFitness\" stroke=\"#ff0000\" />\n                <Line type=\"monotoneX\" dot={false} name=\"Maximálna fitness hodnota generácie\" dataKey=\"maxFitness\" stroke=\"#0040ff\" />\n              </LineChart>\n            </ResponsiveContainer>\n          }\n          <Backdrop\n            sx={{ color: '#fff', zIndex: (theme) => 200 }}\n            open={this.state.loading}\n          >\n            <CircularProgress color=\"inherit\" />\n          </Backdrop>\n        </Box>\n      </div >\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport App from './App';\nimport CssBaseline from '@mui/material/CssBaseline';\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={darkTheme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}